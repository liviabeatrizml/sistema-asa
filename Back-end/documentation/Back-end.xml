<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Back-end</name>
    </assembly>
    <members>
        <member name="T:AgendamentoController">
            <summary>
            Controlador responsável pelas operações de agendamento,
            como solicitar, cancelar e listar agendamentos
            </summary>
        </member>
        <member name="F:AgendamentoController._agendamentoService">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:AgendamentoController"/>.
            </summary>
            <param name="agendamentoService">Serviço de agendamento que será utilizado para as operações.</param>
        </member>
        <member name="M:AgendamentoController.SolicitarAgendamento(Back_end.Dtos.SolicitarAgendamentoDto)">
            <summary>
            Solicita um novo agendamento.
            </summary>
            <param name="dto">Os dados do agendamento a ser solicitado.</param>
            <returns>Um resultado da operação de solicitação de agendamento, incluindo os detalhes do agendamento solicitado.</returns>
        </member>
        <member name="M:AgendamentoController.CancelarAgendamento(System.Int32)">
            <summary>
            Cancela um agendamento existente.
            </summary>
            <param name="id">O ID do agendamento a ser cancelado.</param>
            <returns>Um resultado da operação de cancelamento. Retorna 404 se o agendamento não for encontrado.</returns>
        </member>
        <member name="M:AgendamentoController.ListarAgendamentosPorDiscente(System.Int32)">
            <summary>
            Lista todos os agendamentos de um discente específico.
            </summary>
            <param name="discenteId"></param>
            <returns>Uma lista de agendamentos associados ao discente.</returns>
        </member>
        <member name="M:AgendamentoController.ListarHorariosDisponiveis(System.Int32)">
            <summary>
            Lista os horários disponíveis para um profissional específico.
            </summary>
            <param name="profissionalId">O ID do profissional cujos horários serão listados.</param>
            <returns>Uma lista de horários disponíveis para o profissional.</returns>
        </member>
        <member name="T:Back_end.Controllers.DiscenteController">
            <summary>
            Contém os controladores da API do sistema Back-end, 
            responsáveis por gerenciar as operações relacionadas aos discentes e profissionais.
            </summary>
        </member>
        <member name="F:Back_end.Controllers.DiscenteController._discenteService">
            <summary>
            Inicializa uma nova instância da classe <see cref="T:Back_end.Controllers.DiscenteController"/> e configura o serviço de discentes.
            </summary>
            <param name="discenteService">O serviço de discente que será utilizado para as operações de registro e login.</param>
        </member>
        <member name="M:Back_end.Controllers.DiscenteController.Registrar(Back_end.Models.RegistrarDiscente)">
            <summary>
            Registra um novo discente no sistema.
            </summary>
            <param name="registrarDiscente">Objeto contendo os dados do discente a ser registrado.</param>
            <returns>Retorna o ID e o email do discente registrado ou um erro de registro.</returns>
        </member>
        <member name="M:Back_end.Controllers.DiscenteController.Login(Back_end.Models.LoginDiscente)">
            <summary>
            Realiza o login de um discente no sistema e gera um token de autenticação.
            </summary>
            <param name="loginDiscente">Objeto contendo as credenciais do discente para login.</param>
            <returns>Retorna um token de autenticação ou um erro se as credenciais forem inválidas.</returns>
        </member>
        <member name="M:Back_end.Controllers.DiscenteController.RegistrarProfissional(RegistrarProfissional)">
            <summary>
            Registra um novo profissional no sistema.
            </summary>
            <param name="registrarProfissional">Objeto contendo os dados do profissional a ser registrado.</param>
            <returns>Retorna os detalhes do profissional registrado ou um erro se os dados forem inválidos ou se o e-mail já estiver cadastrado.</returns>
        </member>
        <member name="M:Back_end.Controllers.DiscenteController.LoginProfissional(LoginProfissional)">
            <summary>
            Realiza o login de um profissional no sistema e gera um token de autenticação.
            </summary>
            <param name="loginProfissional">Objeto contendo as credenciais do profissional (email e senha).</param>
            <returns>Retorna um token de autenticação se o login for bem-sucedido ou um erro se os dados forem inválidos ou o login falhar.</returns>
        </member>
        <member name="M:Back_end.Controllers.DiscenteController.GetMe">
            <summary>
            Obtém as informações do usuário autenticado, retornando o ID do usuário.
            </summary>
            <returns>Retorna o ID do usuário autenticado ou um erro se o usuário não estiver autenticado.</returns>
        </member>
        <member name="T:Back_end.Data.ApiDbContext">
            <summary>
            Instancia a API e cria a conexão com o banco de dados
            </summary>
        </member>
        <member name="P:Back_end.Data.ApiDbContext.Discentes">
            <summary>
            Propriedade que representa a tabela Discente no banco de dados
            </summary>
        </member>
        <member name="P:Back_end.Data.ApiDbContext.Profissionais">
            <summary>
            Propriedade que representa a tabela Profissionais no banco de dados
            </summary>
        </member>
        <member name="P:Back_end.Data.ApiDbContext.ServicosDisponiveis">
            <summary>
            Propriedade que representa a tabela ServicosDisponiveis no banco de dados
            </summary>
        </member>
        <member name="P:Back_end.Data.ApiDbContext.HorarioDisponivel">
            <summary>
            Propriedade que representa a tabela HararioDisponivel no banco de dados
            </summary>
        </member>
        <member name="P:Back_end.Data.ApiDbContext.Agendamento">
            <summary>
            Propriedade que representa a tabela Agendamento no banco de dados
            </summary>
        </member>
        <member name="T:Back_end.Helpers.JwtHelper">
            <summary>
            Faz a configuração
            </summary>
        </member>
        <member name="M:Back_end.Helpers.JwtHelper.AddJwtConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Metodo para configurar jwt
            </summary>
            <param name="services">Coleções de serviços</param>
            <param name="configuration">Coleções de serviços</param>
            <exception cref="T:System.ArgumentNullException">Lançando exeção da configuração do jwt</exception>
        </member>
        <member name="T:Back_end.Models.Agendamento">
            <summary>
            Representação da tabela Agendamento no banco de dados em model
            </summary>
        </member>
        <member name="T:Back_end.Models.HorarioDisponivel">
            <summary>
            Representação da tabela HorarioDisponivel no banco de dados em model
            </summary>
        </member>
        <member name="T:Back_end.Models.ResultadoSolicitacao">
            <summary>
            Model que complementa informações necessarias para a construção das APIs de Agendamento
            </summary>
        </member>
        <member name="T:Back_end.Models.ServicoDisponivel">
            <summary>
            Representação da tabela ServicoDisponivel no banco de dados em model
            </summary>
        </member>
        <member name="T:Back_end.Models.Discente">
            <summary>
            Representação da tabela Discente no banco de dados em model
            </summary>
        </member>
        <member name="T:Back_end.Models.LoginDiscente">
            <summary>
            Model que complementa informações necessarias para a construção da API de Login
            </summary>
        </member>
        <member name="T:Back_end.Models.RegistrarDiscente">
            <summary>
            Model que complementa informações necessarias para a construção da API de Registro
            </summary>
        </member>
        <member name="T:Back_end.Models.Profissional">
            <summary>
            Representação da tabela Profissional no banco de dados em model
            </summary>
        </member>
        <member name="T:Back_end.Dtos.SolicitarAgendamentoDto">
            <summary>
            Model que complementa informações necessarias para a construção das APIs de Agendamento
            </summary>
        </member>
        <member name="T:Back_end.Services.AgendamentoService">
            <summary>
            Responsavel por gerenciar as operações relacionadas a agendamento de serviço no sistema
            </summary>
        </member>
        <member name="F:Back_end.Services.AgendamentoService._context">
            <summary>
            Atributo privado que representa o contexto do banco de dados
            </summary>
            <param name="context">Construtor que recebe o banco de dados</param>
        </member>
        <member name="M:Back_end.Services.AgendamentoService.SolicitarAgendamentoAsync(Back_end.Dtos.SolicitarAgendamentoDto)">
            <summary>
            Permite que o discente solicita um novo agendamento com base no horario disponivel 
            para o profissional e serviço especificado
            </summary>
            <param name="dto">Representar conexão com banco de dados</param>
            <returns>Um novo agentademento ou um erro</returns>
        </member>
        <member name="M:Back_end.Services.AgendamentoService.CancelarAgendamentoAsync(System.Int32)">
            <summary>
            Cancela o agendamento
            </summary>
            <param name="agendamentoId">Busca o id agendamento para cancela-lo</param>
            <returns>Cancela o agendamente de acordo com o id, se ele não existir retorna falso</returns>
        </member>
        <member name="M:Back_end.Services.AgendamentoService.ListarAgendamentosPorDiscenteAsync(System.Int32)">
            <summary>
            Lista os agendamentos disponiveis
            </summary>
            <param name="discenteId">Id que o discente ira mandar para receber a lista</param>
            <returns>Retorna os agendamentos disponiveis de acordo com id dos discentes</returns>
        </member>
        <member name="M:Back_end.Services.AgendamentoService.ListarHorariosDisponiveisAsync(System.Int32)">
            <summary>
            Lista os horarios disponiveis
            </summary>
            <param name="profissionalId">Id dos profissionais para saber quais estão disponiveis</param>
            <returns>Retorna os horarios disponiveis de um profissional especifico de acordo com seu id</returns>
        </member>
        <member name="T:Back_end.Services.IAgendamentoService">
            <summary>
            Interface que define os contratos que devem ser implementados pela
            classe AgendamentoService
            </summary>
        </member>
        <member name="T:Back_end.Services.DiscenteService">
            <summary>
            Responsavel por gerenciar as operações relacionadas ao usuario
            </summary>
        </member>
        <member name="F:Back_end.Services.DiscenteService._context">
            <summary>
            Atributo privado que representa o contexto do banco de dados
            </summary>
            <param name="context">Construtor que recebe o banco de dados</param>
            <param name="config">Construtor que recebe o banco de dados</param>
        </member>
        <member name="M:Back_end.Services.DiscenteService.RegistrarDiscenteAsync(Back_end.Models.RegistrarDiscente)">
            <summary>
            Recebe as informações do discente e registra no banco de dados
            </summary>
            <param name="registro">Representa um parametro do tipo registrardiscente</param>
            <returns>Retorna o registro do usuario</returns>
            <exception cref="T:System.ArgumentNullException">Exceção para tratar informações nulas</exception>
        </member>
        <member name="M:Back_end.Services.DiscenteService.LoginDiscenteAsync(Back_end.Models.LoginDiscente)">
            <summary>
            Recebe as informações do discente e faz a validação do usuario
            </summary>
            <param name="login">Representa um parametro do tipo logindiscente</param>
            <returns>Se for verdadeiro entra no sistema, se for falso da erro</returns>
            <exception cref="T:System.ArgumentNullException">Exceção para tratar informações nulas</exception>
        </member>
        <member name="M:Back_end.Services.DiscenteService.CriptografarSenha(System.String)">
            <summary>
            Criptografa a senha a partir do algoritmo HMACSHA512
            </summary>
            <param name="senha">Representa um parametro do tipo senhadiscente</param>
            <returns>Retorna a senha criptografada</returns>
        </member>
        <member name="M:Back_end.Services.DiscenteService.VerificarSenha(System.String,System.String,System.String)">
            <summary>
            Verifica a senha fornecida corresponde a senha no banco de dados
            </summary>
            <param name="senha">Representa um parametro do tipo senhadiscente</param>
            <param name="senhaCriptografada">Senha criptografada</param>
            <param name="salt">Variavel utilizada para fazer comparação de Hash</param>
            <returns>Retorna verdadeiro se a senha estiver no banco de dados, e se nao retorna falso</returns>
        </member>
        <member name="M:Back_end.Services.DiscenteService.GerarTokenJwt(System.String,System.String)">
            <summary>
            Gera token jwt para autenticar discentes e profissionais
            </summary>
            <param name="id">id do usuario ou profissional</param>
            <param name="email">email do usuario ou profissional</param>
            <returns>Retorna o id do usuario definido a partir de uma chave simetrica definido nas variaveis do sistema</returns>
        </member>
        <member name="M:Back_end.Services.DiscenteService.EmailJaCadastradoAsync(System.String)">
            <summary>
            Verifica se o email ja foi cadastrado
            </summary>
            <param name="email">email do usuario ou profissional</param>
            <returns>Retorna verdadeiro caso o email ja tiver no banco de dados</returns>
        </member>
        <member name="M:Back_end.Services.DiscenteService.RegistrarProfissionalAsync(RegistrarProfissional)">
            <summary>
            Recebe as informações do profissional e registra no banco de dados
            </summary>
            <param name="registro">Representa um parametro do tipo registrarprofissional</param>
            <returns>Retorna o registro do profissional</returns>
            <exception cref="T:System.ArgumentNullException">Exceção para tratar informações nulas</exception>
        </member>
        <member name="M:Back_end.Services.DiscenteService.LoginProfissionalAsync(LoginProfissional)">
            <summary>
            Recebe as informações do profissional e faz a sua validação
            </summary>
            <param name="login">Representa um parametro do ipo loginprofissional</param>
            <returns>Se for verdadeiro entra no sistema, se for falso da erro</returns>
            <exception cref="T:System.ArgumentNullException">Exceção para tratar informações nulas</exception>
        </member>
        <member name="M:Back_end.Services.DiscenteService.AtualizarPerfilAsync(AtualizarPerfilDto)">
            <summary>
            Atualiza o perfil do discente ou profissional do sistema
            </summary>
            <param name="atualizarPerfil">Eh um parametro que recebe a model atualizarperfil</param>
            <returns>Se verdadeiro ele atualiza as informações do perfil</returns>
        </member>
        <member name="M:Back_end.Services.DiscenteService.AlterarSenhaAsync(AlterarSenhaDto)">
            <summary>
            Permite que o discente ou profissional altere sua senha
            </summary>
            <param name="alterarSenha">Eh um parametro que recebe a model alterarsenha</param>
            <returns>Retorna se verdadeiro a senha sera alterada, se não, não altera</returns>
        </member>
        <member name="T:AlterarSenhaDto">
            <summary>
            Classe responsavel para definir atributos para alterar email e senha
            do usuario que serão usados na API de AtualizarPerfil
            </summary>
        </member>
        <member name="T:AtualizarPerfilDto">
            <summary>
            Classe responsavel para definir atributos para alterar email, nome e telefone
            do usuario que serão usados na API de AtualizarPerfil
            </summary>
        </member>
        <member name="T:LoginProfissional">
            <summary>
            Model que complementa informações relacionadas ao profissional 
            para a construção da API de Login
            </summary>
        </member>
        <member name="T:RegistrarProfissional">
            <summary>
            Model que complementa informações relacionadas ao profissional 
            para a construção da API de Registro
            </summary>
        </member>
        <member name="T:IDiscenteService">
            <summary>
            Interface que define os contratos que devem ser implementados pela
            classe DiscenteService
            </summary>
        </member>
    </members>
</doc>
