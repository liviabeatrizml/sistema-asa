@page "/inicio"
@attribute [Authorize]
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject ServicoService ServicoService
@inject AgendamentoService AgendamentoService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Início</PageTitle>

<div class="page" style="background-color: var(--blue-ufersa); height: auto;">
        <NavMenu />

        <div style="padding-top: 29px; border-radius: 15px 0px 0px 15px; width: 100%; background-color: white;">
            <Header />
            <main class="page" style="padding-left: 4rem; padding-right: 3rem; padding-top: 20px; justify-content: space-between; display: flex; flex-wrap: wrap;">

                <div style="display: flex; justify-content: space-between; width: 100%;">

                    <div style="width: 42.5rem; height: 23.5rem; background: linear-gradient(109.09deg, #243E64 40.1%, #3E5C89 100%); border-radius: 10px; box-shadow: 0px 4px 4px 0px #00000040; display: flex; position: relative;">

                        <div class="blue-div"></div>

                        <div class="content-div" style="padding: 15px 20px; width: 23.375rem;">
                            <p class="paragraph-size weight-700" style="color: var(--black-gray);">UFERSA</p>
                            <h1 class="px46" style="color: var(--white); font-weight: 800;">Agende com facilidade</h1>
                            <p class="paragraph-size weight-500" style="color: var(--white); width: 90%;">Bem-vindo(a) à plataforma de agendamento de serviços. Utilize o botão abaixo para começar.</p>

                            <div class="d-grid gap-2 py-2">
                                <a href="/agenda" class="btn btn-secondary weight-700 border-radius-30 paragraph-size" style="display: flex; align-items: center; justify-content: center; height: 3rem; align-items: center; width: 50%">Agendar</a>
                            </div>
                        </div>

                        <img style="position: absolute; right: -1.7rem; bottom: 1.688rem; height: 100%; z-index: 2; transform: scale(1.15);" src="..\\css\\images\\mulher-inicio.png">

                    </div>

                    <div style="width: 19.063rem;">
                        <h1 style="padding-left: 20px;" class="px24 weight-700">Compromissos</h1>

                        @if(compromissos != null){
                            @for(int i = 0; i < Math.Min(compromissos.Count, 4); i++){
                                <div style="display: flex; padding-top: 15px">
                                    <img src="..\\css\\images\\compromisso-ex.svg">
                                    <div style="padding-left: 15px;">
                                        <h2 class="weight-600 paragraph-size">@compromissos[i].Servico</h2>
                                        <div>
                                            <div style="display: flex; padding-top: 2px;">
                                                <div class="compromise">
                                                    <img src="..\\css\\images\\calendario.svg">
                                                    <span style="color: var(--black-gray); padding-left: 8px;">@compromissos[i].Data.ToString("dd-MM-yyyy")</span>
                                                </div>
                                                <div class="compromise">
                                                    <img src="..\\css\\images\\relogio.svg">
                                                    <span style="color: var(--black-gray); padding-left: 8px;">@(($"{(@compromissos[i].HoraInicio.Hours % 12):D2}:{@compromissos[i].HoraInicio.Minutes:D2} {( @compromissos[i].HoraInicio.Hours >= 12 ? "PM" : "AM") }"))</span>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                            }

                        }
                    </div>

                </div>

                <div style="display: flex; justify-content: space-between; width: 100%; align-items: center;">

                    <div>
                        <div>
                            <h1 style="padding: 20px 20px;" class="px24 weight-700">Serviços</h1>
                            <div id="scroll-container" style="display: flex;  width: 42.5rem; overflow: auto; scrollbar-width: none; user-select: none;">
                                @if(servicos != null){
                                    @for(int i = 0; i < servicos.Count; i++){
                                        var index = i;

                                        <div class="service" style="@(i != 0 ? "margin-left: 30px;" : "margin-left: 0px;")" @onclick="() => ativarServico(servicos[index], index)">
                                            <img class="@(i == id_servico_escolhido ? "background-service-active" : "background-service") no-select" style="width: 11.75rem; height: 11.75rem;" src="..\css\images\img-servico@(i%4).svg">
                                            <div class="service-people no-select">
                                                <div style="padding-left: 10px;">
                                                    <h3 class="weight-700" style="font-size: 0.875rem; color: var(--blue-ufersa); margin: 0px; padding-bottom: 5px; text-align: left;">@servicos[i].Nome_Profissional</h3>
                                                    <p class="weight-500" style="font-size: 0.5rem; color: var(--blue-ufersa); margin: 0px;">@servicos[i].Tipo_Servico</p>
                                                </div>
                                                <img src="..\css\images\servico-ex.svg">
                                            </div>
                                        </div>
                                    }

                                }
                            </div>
                        </div>
                        <div style="width: 42.5rem;">
                            <h1 style="padding: 20px 20px;" class="px24 weight-700">Informações</h1>
                            <div style="display: flex; align-items: flex-start;">
                                <img style="width: 5.5rem; height: 5.5rem;" src="..\css\images\info-ex.svg">
                                <div style="padding: 5px 5px 0px 10px;">
                                    @if(servicos != null){
                                        <h2 class="weight-600" style="font-size: 1.375rem; margin: 0; padding-bottom: 5px;">@servico_escolhido.Nome_Profissional</h2>
                                        <span class="weight-500" style="color: var(--black-gray);">@servico_escolhido.Tipo_Servico - CRP 17/0000</span>
                                        <p class="weight-500" style="font-size: 1.125rem; color: var(--black-gray); padding-top: 15px;">
                                            @((servico_escolhido.Descricao.Length > 160) ? servico_escolhido.Descricao.Substring(0, 160) + "..." : servico_escolhido.Descricao)
                                        </p>
                                    }
                                </div>
                                <div style="padding: 5px 0px; display: flex;">
                                    <img src="..\css\images\info-agendar.svg">
                                    <a href="/servicos"><img style="padding-left: 20px;" src="..\css\images\info-relatar.svg"></a>
                                </div>
                            </div>
                        </div>
                    </div>

                    <Calendario />
                    
                </div>

            </main>
        </div>
</div>

@code {
    private List<ServicoProfissionalModel> servicos;
    private ServicoProfissionalModel servico_escolhido;
    private int id_servico_escolhido = 0;

    private List<CompromissoModel> compromissos;

    protected override async Task OnInitializedAsync()
    {
        servicos = await ServicoService.ListServicos();
        servico_escolhido = servicos[0];

        int userId = await ((CustomAuthStateProvider)AuthenticationStateProvider).GetUserIdFromLocalStorage();
        if(userId != -1){
            compromissos = await AgendamentoService.GetCompromissosDiscente(userId);
        }
    }

    public void ativarServico(ServicoProfissionalModel servico, int id_servico){
        servico_escolhido = servico;
        id_servico_escolhido = id_servico;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("enableDragScroll", "scroll-container");
        }
    }
}